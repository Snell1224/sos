#!/usr/bin/env python
from __future__ import print_function
import datetime as dt
import sys
import numpy as np
import argparse
from sos import Sos
import json

def query_schema(cont, verbose=False):
    for s in cont:
        print(s.name())
        if verbose:
            print("{0:4} {1:16} {2:12} {3:32}".format("Id", "Type", "Indexed", "Name"))
            print("{0} {1} {2} {3}".\
                  format('-'.ljust(4, '-'), '-'.ljust(16,'-'),
                         '-'.ljust(12,'-'), '-'.ljust(32,'-')))
            for a in s:
                if a.indexed():
                    idx_s = "True"
                else:
                    idx_s = ""
                type_name = a.type_name()
                if a.type() == Sos.TYPE_STRUCT:
                    type_name += '[' + str(a.size()) + ']'
                print("{0:4} {1:16} {2} {3}".\
                      format(a.attr_id(), type_name,
                             idx_s.ljust(12,' '), a.name()))

def add_schema(cont, path):
    fp = open(path, 'r')
    spec = json.load(fp)
    schema = Sos.Schema()
    schema.from_template(spec['name'], spec['attrs'])
    schema.add(cont)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Query metric data in a container")
    parser.add_argument("--path", required=True,
                        help="The path to the container.")
    parser.add_argument("--query", action="store_true",
                        help="Query a container's schema")
    parser.add_argument("--add", action="store_true",
                        help="Add a schema to the container.")
    parser.add_argument("--template",
                        help="The path to a JSon formatted schema specification file")
    parser.add_argument("--verbose", action="store_true",
                        help="Request verbose query output")
    args = parser.parse_args()

    cont = Sos.Container()
    cont.open(args.path)

    if args.query:
        query_schema(cont, verbose=args.verbose)

    if args.add:
        add_schema(cont, args.template)

