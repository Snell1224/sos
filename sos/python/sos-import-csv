#!/usr/bin/env python
from __future__ import print_function
import time
import sys
import argparse
from sos import Sos
import struct
import json

def pack_it(cols, fmt, idx_ary):
    vals = []
    for spec in idx_ary:
        if type(spec) == unicode:
            try:
                arg = int(float(spec))
            except:
                arg = spec
        else:
            arg = int(float(cols[spec]))
        vals.append(arg)
    if len(vals) == 1:
        return vals[0]
    tpl = tuple(v for v in vals)
    return struct.pack(fmt, *tpl)

def make_combo(fmt, ary):
    return lambda cols: pack_it(cols, fmt, ary)

def make_lambda(attr, col_no):
    t = attr.type()
    if t < Sos.TYPE_FLOAT:
        return lambda cols: int(cols[col_no])
    elif t < Sos.TYPE_TIMESTAMP:
        return lambda cols: float(cols[col_no])
    return lambda cols: cols[col_no]

def make_value(attr, value):
    t = attr.type()
    if t < Sos.TYPE_FLOAT:
        return lambda cols: int(value)
    elif t < Sos.TYPE_TIMESTAMP:
        return lambda cols: float(value)
    return lambda cols: value

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Query metric data in a container")
    parser.add_argument("--path", required=True,
                        help="The path to the container.")
    parser.add_argument("--schema", required=True,
                        help="The schema defining the objects being imported")
    parser.add_argument("--map",
                        help="Specifies how CSV columns are mapped to attributes")
    parser.add_argument("--csv",
                        help="The path to the CSV file to import")
    parser.add_argument("--test", action="store_true",
                        help="Process the input CSV with the map, but don't add the data")
    parser.add_argument("--status", action="store_true",
                        help="Show detail import status")
    args = parser.parse_args()

    cont = Sos.Container()
    cont.open(args.path)

    mf = open(args.map, 'r')
    imap = []                   # an entry for each column
    spec = {}
    l = mf.read()

    schema = cont.schema_by_name(args.schema)
    print("Importing from CSV file {0} into {1} using map {2}".format(args.csv, args.path, args.map))

    attr_id = 0
    values = []
    for e in l.split(':'):
        attr = schema.attr_by_id(attr_id)
        values.append(Sos.Value(attr))
        try:
            # entry is the CSV input column. we need a separate scope
            # for each col_no, otherwise, the function will end up
            # binding to the same var for every instance
            k = make_lambda(attr, int(e))
            imap.append(k)
            spec[k] = e
        except:
            # parse the entry
            if e.upper() == "X":
                imap.append(None)
                spec[None] = e
                continue
            # first part is the struct
            sep = e.find('[')
            fmt = e[0:sep]      # the struct.pack fmt parameter
            ids = e[sep:]       # the indices in the input line to use
            try:
                ary = json.loads(ids)
            except Exception as ex:
                print(ex)
                print("{0} could not be decoded, spec is {1}".format(ids, e))
                sys.exit(1)
            k = make_combo(fmt, ary)
            imap.append(k)
            spec[k] = e
        attr_id = attr_id + 1

    df = open(args.csv, 'r')
    count = 0
    t0 = time.time()
    new_recs = 0
    obj = None
    for l in df:
        cols = l.split(',')
        attr_id = 0

        if not args.test:
            obj = schema.alloc()

        for c in imap:
            if c is None:
                # This is the "X" in the input conversion
                continue
            try:
                v = c(cols)
                if obj:
                    obj[attr_id] = v
            except Exception as ex:
                print("An exception occurred parsing the CSV input.")
                print("Exception Detail : {0}".format(ex))
                print("Value            : '{0}' Type {1}".format(v, type(v)))
                print("Attribute Id     : {0}".format(attr_id))
                print("Parsing function : {0}".format(c))
                print("Associated Spec  : {0}".format(spec[c]))
                print("Input Line       :\n{0}".format(cols))
                sys.exit(1)
            attr_id = attr_id + 1

        if obj:
            obj.index_add()
            del obj
            obj = None

        count += 1
        if args.status:
            new_recs += 1.
            t1 = time.time()
            t = t1 - t0
            if t > 5.0:
                print("{0} records/second".format(new_recs / t))
                new_recs = 0.
                t0 = t1

    cont.close()
    print("Created {0} records".format(count))
